{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///Users/mxolisiblessedmasuku/Repositories/blog_portfolio/lib/articles.ts"],"sourcesContent":["import fs from \"fs\";\nimport matter from \"gray-matter\";\nimport path from \"path\";\nimport moment from \"moment\";\nimport {remark} from \"remark\"\nimport html from \"remark-html\"\n\nimport type { ArticleItem } from \"@/types\";\n\nconst articlesDirectory = path.join(process.cwd(), \"articles\")\n\nconst getSortedArticles = (): ArticleItem[] => {\n    const fileNames = fs.readdirSync(articlesDirectory)\n\n    const allArticlesData = fileNames.map((fileName) => {\n        const id = fileName.replace(/\\.mdx$/, \"\")\n\n        const fullPath = path.join(articlesDirectory, fileName)\n        const fileContents = fs.readFileSync(fullPath, \"utf-8\")\n        const matterResult = matter(fileContents)\n\n        return{\n            id, \n            title: matterResult.data.title,\n            date: matterResult.data.date,\n            category: matterResult.data.category\n        }\n    })\n\n    return allArticlesData.sort((a, b) => {\n        const format = \"DD-MM-YYYY\";\n        const dateOne = moment(a.date, format)\n        const dateTwo = moment(b.date, format)\n\n        if(dateOne.isBefore(dateTwo)){\n            return -1\n        }else if(dateTwo.isAfter(dateOne)) {\n            return 1\n        }else {\n            return 0\n        }\n\n\n    })\n}\n\nexport const getCategorisedArticles = (): Record<string, ArticleItem[]> => {\n    const sortedArticles = getSortedArticles();\n    const categorizedArticles: Record<string, ArticleItem[]> = {}\n\n    sortedArticles.forEach(article => {\n        if(!categorizedArticles[article.category]) {\n            categorizedArticles[article.category] = []\n        }\n        categorizedArticles[article.category].push(article)\n    })\n\n    return categorizedArticles\n\n\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAMA,MAAM,oBAAoB,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;AAEnD,MAAM,oBAAoB;IACtB,MAAM,YAAY,6FAAA,CAAA,UAAE,CAAC,WAAW,CAAC;IAEjC,MAAM,kBAAkB,UAAU,GAAG,CAAC,CAAC;QACnC,MAAM,KAAK,SAAS,OAAO,CAAC,UAAU;QAEtC,MAAM,WAAW,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,mBAAmB;QAC9C,MAAM,eAAe,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,UAAU;QAC/C,MAAM,eAAe,CAAA,GAAA,uIAAA,CAAA,UAAM,AAAD,EAAE;QAE5B,OAAM;YACF;YACA,OAAO,aAAa,IAAI,CAAC,KAAK;YAC9B,MAAM,aAAa,IAAI,CAAC,IAAI;YAC5B,UAAU,aAAa,IAAI,CAAC,QAAQ;QACxC;IACJ;IAEA,OAAO,gBAAgB,IAAI,CAAC,CAAC,GAAG;QAC5B,MAAM,SAAS;QACf,MAAM,UAAU,CAAA,GAAA,gIAAA,CAAA,UAAM,AAAD,EAAE,EAAE,IAAI,EAAE;QAC/B,MAAM,UAAU,CAAA,GAAA,gIAAA,CAAA,UAAM,AAAD,EAAE,EAAE,IAAI,EAAE;QAE/B,IAAG,QAAQ,QAAQ,CAAC,UAAS;YACzB,OAAO,CAAC;QACZ,OAAM,IAAG,QAAQ,OAAO,CAAC,UAAU;YAC/B,OAAO;QACX,OAAM;YACF,OAAO;QACX;IAGJ;AACJ;AAEO,MAAM,yBAAyB;IAClC,MAAM,iBAAiB;IACvB,MAAM,sBAAqD,CAAC;IAE5D,eAAe,OAAO,CAAC,CAAA;QACnB,IAAG,CAAC,mBAAmB,CAAC,QAAQ,QAAQ,CAAC,EAAE;YACvC,mBAAmB,CAAC,QAAQ,QAAQ,CAAC,GAAG,EAAE;QAC9C;QACA,mBAAmB,CAAC,QAAQ,QAAQ,CAAC,CAAC,IAAI,CAAC;IAC/C;IAEA,OAAO;AAGX"}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 93, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 93, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}